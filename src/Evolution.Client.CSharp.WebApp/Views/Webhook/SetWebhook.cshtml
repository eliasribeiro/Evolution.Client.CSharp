@model Evolution.Client.CSharp.Models.Webhook.SetWebhookRequest

@{
    ViewData["Title"] = "Configurar Webhook";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Início</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Webhook")">Webhook</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Configurar</li>
                </ol>
            </nav>

            <h2 class="mb-4">
                <i class="fas fa-cog"></i>
                Configurar Webhook
            </h2>
        </div>
    </div>

    <div class="row">
        <div class="col-md-8">
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-webhook"></i>
                        Configuração do Webhook
                    </h5>
                </div>
                <div class="card-body">
                    <form asp-action="SetWebhook" method="post">
                        <div class="mb-3">
                            <label for="instanceName" class="form-label">Nome da Instância *</label>
                            <input type="text" class="form-control" id="instanceName" name="instanceName" 
                                   placeholder="Digite o nome da instância" required>
                            <div class="form-text">Nome da instância WhatsApp configurada.</div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="mb-3">
                                    <div class="form-check form-switch">
                                        <input asp-for="Enabled" class="form-check-input" type="checkbox" id="enabled">
                                        <label asp-for="Enabled" class="form-check-label" for="enabled">
                                            <i class="fas fa-power-off"></i> Habilitar Webhook
                                        </label>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="form-check form-switch">
                                        <input asp-for="WebhookByEvents" class="form-check-input" type="checkbox" id="webhookByEvents">
                                        <label asp-for="WebhookByEvents" class="form-check-label" for="webhookByEvents">
                                            <i class="fas fa-calendar-alt"></i> Webhook por Eventos
                                        </label>
                                    </div>
                                </div>

                                <div class="mb-3">
                                    <div class="form-check form-switch">
                                        <input asp-for="WebhookBase64" class="form-check-input" type="checkbox" id="webhookBase64">
                                        <label asp-for="WebhookBase64" class="form-check-label" for="webhookBase64">
                                            <i class="fas fa-file-code"></i> Enviar arquivos em Base64
                                        </label>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="mb-3">
                                    <label asp-for="Url" class="form-label">
                                        <i class="fas fa-link"></i> URL do Webhook *
                                    </label>
                                    <input asp-for="Url" type="url" class="form-control" 
                                           placeholder="https://exemplo.com/webhook" required>
                                    <div class="form-text">URL que receberá os eventos do webhook.</div>
                                </div>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">
                                <i class="fas fa-list"></i> Eventos (separados por vírgula)
                            </label>
                            <textarea class="form-control" rows="4" id="eventsInput" 
                                      placeholder="APPLICATION_STARTUP,QRCODE_UPDATED,CONNECTION_UPDATE,MESSAGES_UPSERT"></textarea>
                            <div class="form-text">
                                Digite os eventos separados por vírgula. Exemplos: APPLICATION_STARTUP, QRCODE_UPDATED, CONNECTION_UPDATE, MESSAGES_UPSERT
                            </div>
                        </div>

                        <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                            <a href="@Url.Action("Index", "Webhook")" class="btn btn-secondary me-md-2">
                                <i class="fas fa-arrow-left"></i> Voltar
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-save"></i> Configurar Webhook
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="col-md-4">
            <div class="card">
                <div class="card-header">
                    <h6 class="mb-0">
                        <i class="fas fa-info-circle"></i>
                        Informações
                    </h6>
                </div>
                <div class="card-body">
                    <p class="card-text">
                        <strong>Webhook:</strong><br>
                        Configure o endpoint que receberá notificações dos eventos da instância.
                    </p>
                    <hr>
                    <p class="card-text">
                        <strong>Eventos Comuns:</strong>
                    </p>
                    <ul class="list-unstyled small">
                        <li><i class="fas fa-dot-circle text-primary"></i> APPLICATION_STARTUP</li>
                        <li><i class="fas fa-dot-circle text-success"></i> QRCODE_UPDATED</li>
                        <li><i class="fas fa-dot-circle text-info"></i> CONNECTION_UPDATE</li>
                        <li><i class="fas fa-dot-circle text-warning"></i> MESSAGES_UPSERT</li>
                        <li><i class="fas fa-dot-circle text-danger"></i> MESSAGES_UPDATE</li>
                    </ul>
                    <hr>
                    <div class="alert alert-info" role="alert">
                        <small>
                            <i class="fas fa-lightbulb"></i>
                            <strong>Dica:</strong> Teste sua URL antes de configurar para garantir que está acessível.
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (ViewBag.Success == true && ViewBag.Response != null)
    {
        var response = ViewBag.Response as Evolution.Client.CSharp.Models.Webhook.SetWebhookResponse;
        <div class="row mt-4">
            <div class="col-12">
                <div class="alert alert-success" role="alert">
                    <h4 class="alert-heading">
                        <i class="fas fa-check-circle"></i>
                        Webhook Configurado com Sucesso!
                    </h4>
                    <p><strong>Status:</strong> @(response?.Webhook.Enabled == true ? "Habilitado" : "Desabilitado")</p>
                    <p><strong>URL:</strong> @response?.Webhook.Url</p>
                    <p><strong>Por Eventos:</strong> @(response?.Webhook.WebhookByEvents == true ? "Sim" : "Não")</p>
                    <p><strong>Base64:</strong> @(response?.Webhook.WebhookBase64 == true ? "Sim" : "Não")</p>
                    @if (response?.Webhook.Events?.Length > 0)
                    {
                        <p><strong>Eventos:</strong> @string.Join(", ", response?.Webhook.Events ?? Array.Empty<string>())</p>
                    }
                    <hr>
                    <div class="text-center">
                        <a href="@Url.Action("FindWebhook", "Webhook")" class="btn btn-secondary">
                            <i class="fas fa-search"></i> Consultar Webhook
                        </a>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (ViewBag.Success == false && !string.IsNullOrEmpty(ViewBag.Error))
    {
        <div class="row mt-4">
            <div class="col-12">
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">
                        <i class="fas fa-exclamation-triangle"></i>
                        Erro ao Configurar Webhook
                    </h4>
                    <p>@ViewBag.Error</p>
                </div>
            </div>
        </div>
    }
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        const eventsInput = document.getElementById('eventsInput');
        const form = document.querySelector('form');
        
        form.addEventListener('submit', function(e) {
            const eventsText = eventsInput.value.trim();
            if (eventsText) {
                const events = eventsText.split(',').map(e => e.trim()).filter(e => e);
                
                // Remove existing hidden inputs
                const existingInputs = form.querySelectorAll('input[name^="Events"]');
                existingInputs.forEach(input => input.remove());
                
                // Add new hidden inputs for each event
                events.forEach((event, index) => {
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = `Events[${index}]`;
                    hiddenInput.value = event;
                    form.appendChild(hiddenInput);
                });
            }
        });
    });
</script>