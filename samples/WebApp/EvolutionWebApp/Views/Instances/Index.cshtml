@model IEnumerable<Evolution.Client.CSharp.Models.Instance.InstanceResponse>

@{
    ViewData["Title"] = "Gerenciamento de Instâncias";
}

<div class="container mt-4">
    <h1 class="display-4 text-center mb-4">Gerenciamento de Instâncias</h1>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger" role="alert">
            <h4 class="alert-heading">Erro!</h4>
            <p>@TempData["ErrorMessage"]</p>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success" role="alert">
            <h4 class="alert-heading">Sucesso!</h4>
            <p>@TempData["SuccessMessage"]</p>
        </div>
    }

    <div class="mb-3">
        <a asp-action="Create" class="btn btn-success">
            <i class="bi bi-plus-circle"></i> Nova Instância
        </a>
    </div>

    @if (Model != null && Model.Any())
    {
        <div class="card">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h2>Instâncias Disponíveis (@Model.Count())</h2>
            </div>
            <div class="card-body">
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-dark">
                            <tr>
                                <th>Nome</th>
                                <th>ID</th>
                                <th>Status</th>
                                <th>Estado de Conexão</th>
                                <th>Número</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var instance in Model)
                            {
                                <tr>
                                    <td>@instance.Name</td>
                                    <td>@instance.Id</td>
                                    <td>
                                        @instance.ConnectionStatus
                                    </td>
                                    <td>
                                        <span id="connectionState-@instance.Name" class="badge bg-secondary">
                                            <i class="bi bi-hourglass-split"></i> Verificando...
                                        </span>
                                    </td>
                                    <td>@instance.Number</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a asp-action="Details" asp-route-id="@instance.Id" class="btn btn-info btn-sm">
                                                <i class="bi bi-info-circle"></i> Detalhes
                                            </a>
                                            <button type="button" class="btn btn-primary btn-sm" onclick="connectInstance('@instance.Name')">
                                                <i class="bi bi-qr-code"></i> Conectar
                                            </button>
                                            <button type="button" class="btn btn-danger btn-sm" onclick="logoutInstance('@instance.Name')" title="Fazer Logout">
                                                <i class="bi bi-box-arrow-right"></i> Logout
                                            </button>
                                            <button type="button" class="btn btn-warning btn-sm" onclick="deleteInstance('@instance.Name')" title="Deletar Instância">
                                                <i class="bi bi-trash"></i> Deletar
                                            </button>
                                            <button type="button" class="btn btn-success btn-sm" onclick="checkConnectionState('@instance.Name')" title="Verificar Estado">
                                                <i class="bi bi-arrow-clockwise"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            <h4 class="alert-heading">Nenhuma instância encontrada!</h4>
            <p>Não há instâncias disponíveis no momento. Verifique se a API está configurada corretamente.</p>
            <hr>
            <p class="mb-0">
                <a asp-action="Create" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i> Criar sua primeira instância
                </a>
            </p>
        </div>
    }
</div>

<!-- Modal para exibir QR Code -->
<div class="modal fade" id="qrCodeModal" tabindex="-1" aria-labelledby="qrCodeModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-primary text-white">
                <h5 class="modal-title" id="qrCodeModalLabel">
                    <i class="bi bi-qr-code"></i> Conectar Instância
                </h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div id="loadingSpinner" class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Carregando...</span>
                    </div>
                    <p class="mt-2">Gerando QR Code...</p>
                </div>
                
                <div id="qrCodeContent" style="display: none;">
                    <div class="row">
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header bg-success text-white">
                                    <h6 class="mb-0">Informações da Conexão</h6>
                                </div>
                                <div class="card-body">
                                    <dl class="row">
                                        <dt class="col-sm-5">Instância:</dt>
                                        <dd class="col-sm-7" id="instanceName"></dd>
                                        
                                        <dt class="col-sm-5">Contagem:</dt>
                                        <dd class="col-sm-7" id="count"></dd>
                                        
                                        <div id="pairingCodeSection" style="display: none;">
                                            <dt class="col-sm-5">Código de Pareamento:</dt>
                                            <dd class="col-sm-7">
                                                <div class="alert alert-info mb-0">
                                                    <strong id="pairingCode"></strong>
                                                </div>
                                            </dd>
                                        </div>
                                    </dl>
                                </div>
                            </div>
                        </div>
                        
                        <div class="col-md-6">
                            <div class="card">
                                <div class="card-header bg-primary text-white">
                                    <h6 class="mb-0">QR Code</h6>
                                </div>
                                <div class="card-body text-center">
                                    <img id="qrCodeImage" src="" alt="QR Code" class="img-fluid" style="max-width: 250px;" />
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <div class="mt-3">
                        <div class="alert alert-info">
                            <h6><i class="bi bi-info-circle"></i> Instruções</h6>
                            <ol class="mb-0">
                                <li>Abra o WhatsApp no seu celular</li>
                                <li>Toque em <strong>Menu</strong> ou <strong>Configurações</strong></li>
                                <li>Toque em <strong>Dispositivos Conectados</strong></li>
                                <li>Toque em <strong>Conectar um Dispositivo</strong></li>
                                <li>Aponte a câmera do seu celular para escanear o QR code</li>
                            </ol>
                        </div>
                    </div>
                </div>
                
                <div id="errorContent" style="display: none;">
                    <div class="alert alert-danger">
                        <h6><i class="bi bi-exclamation-triangle"></i> Erro</h6>
                        <p id="errorMessage" class="mb-0"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                <button type="button" class="btn btn-primary" id="refreshQrCode" onclick="refreshCurrentQrCode()" style="display: none;">
                    <i class="bi bi-arrow-clockwise"></i> Atualizar QR Code
                </button>
            </div>
        </div>
    </div>
</div>

<script>
let currentInstanceName = '';

function connectInstance(instanceName) {
    currentInstanceName = instanceName;
    
    // Mostrar modal
    const modal = new bootstrap.Modal(document.getElementById('qrCodeModal'));
    modal.show();
    
    // Resetar estado do modal
    document.getElementById('loadingSpinner').style.display = 'block';
    document.getElementById('qrCodeContent').style.display = 'none';
    document.getElementById('errorContent').style.display = 'none';
    document.getElementById('refreshQrCode').style.display = 'none';
    
    // Fazer requisição AJAX
    fetch('@Url.Action("ConnectAjax", "Instances")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: 'instanceName=' + encodeURIComponent(instanceName)
    })
    .then(response => response.json())
    .then(data => {
        document.getElementById('loadingSpinner').style.display = 'none';
        
        if (data.success) {
            // Exibir dados de conexão
            document.getElementById('instanceName').textContent = data.data.instanceName;
            document.getElementById('count').textContent = data.data.count;
            document.getElementById('qrCodeImage').src = data.data.qrCodeBase64;
            
            // Mostrar código de pareamento se disponível
            if (data.data.pairingCode) {
                document.getElementById('pairingCode').textContent = data.data.pairingCode;
                document.getElementById('pairingCodeSection').style.display = 'block';
            } else {
                document.getElementById('pairingCodeSection').style.display = 'none';
            }
            
            document.getElementById('qrCodeContent').style.display = 'block';
            document.getElementById('refreshQrCode').style.display = 'inline-block';
        } else {
            // Exibir erro
            document.getElementById('errorMessage').textContent = data.message;
            document.getElementById('errorContent').style.display = 'block';
        }
    })
    .catch(error => {
        document.getElementById('loadingSpinner').style.display = 'none';
        document.getElementById('errorMessage').textContent = 'Erro de comunicação: ' + error.message;
        document.getElementById('errorContent').style.display = 'block';
    });
}

function refreshCurrentQrCode() {
    if (currentInstanceName) {
        connectInstance(currentInstanceName);
    }
}

function checkConnectionState(instanceName) {
    const stateElement = document.getElementById('connectionState-' + instanceName);
    
    // Mostrar estado de carregamento
    stateElement.innerHTML = '<i class="bi bi-hourglass-split"></i> Verificando...';
    stateElement.className = 'badge bg-secondary';
    
    // Fazer requisição AJAX para verificar o estado
    fetch('@Url.Action("ConnectionState", "Instances")?instanceName=' + encodeURIComponent(instanceName), {
        method: 'GET',
        headers: {
            'Content-Type': 'application/json'
        }
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            updateConnectionStateDisplay(instanceName, data.data.state);
        } else {
            stateElement.innerHTML = '<i class="bi bi-exclamation-triangle"></i> Erro';
            stateElement.className = 'badge bg-danger';
            stateElement.title = data.message;
        }
    })
    .catch(error => {
        stateElement.innerHTML = '<i class="bi bi-wifi-off"></i> Erro';
        stateElement.className = 'badge bg-danger';
        stateElement.title = 'Erro de comunicação: ' + error.message;
    });
}

function updateConnectionStateDisplay(instanceName, state) {
    const stateElement = document.getElementById('connectionState-' + instanceName);
    
    switch (state?.toLowerCase()) {
        case 'open':
            stateElement.innerHTML = '<i class="bi bi-check-circle"></i> Conectado';
            stateElement.className = 'badge bg-success';
            stateElement.title = 'Instância conectada e ativa';
            break;
        case 'close':
            stateElement.innerHTML = '<i class="bi bi-x-circle"></i> Desconectado';
            stateElement.className = 'badge bg-danger';
            stateElement.title = 'Instância desconectada';
            break;
        case 'connecting':
            stateElement.innerHTML = '<i class="bi bi-arrow-repeat"></i> Conectando';
            stateElement.className = 'badge bg-warning';
            stateElement.title = 'Instância tentando conectar';
            break;
        default:
            stateElement.innerHTML = '<i class="bi bi-question-circle"></i> ' + (state || 'Desconhecido');
            stateElement.className = 'badge bg-secondary';
            stateElement.title = 'Estado: ' + (state || 'Desconhecido');
            break;
    }
}

function checkAllConnectionStates() {
    // Verificar o estado de todas as instâncias na página
    const stateElements = document.querySelectorAll('[id^="connectionState-"]');
    stateElements.forEach(element => {
        const instanceName = element.id.replace('connectionState-', '');
        checkConnectionState(instanceName);
    });
}

function logoutInstance(instanceName) {
    // Confirmar ação com o usuário
    if (!confirm(`Tem certeza que deseja fazer logout da instância "${instanceName}"?`)) {
        return;
    }
    
    // Fazer requisição AJAX para logout
    fetch('@Url.Action("Logout", "Instances")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: 'instanceName=' + encodeURIComponent(instanceName)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Mostrar mensagem de sucesso
            alert('Logout realizado com sucesso: ' + data.message);
            
            // Atualizar o estado de conexão da instância
            checkConnectionState(instanceName);
        } else {
            // Mostrar mensagem de erro
            alert('Erro ao fazer logout: ' + data.message);
        }
    })
    .catch(error => {
        alert('Erro de comunicação: ' + error.message);
    });
}

function deleteInstance(instanceName) {
    // Confirmar ação com o usuário (dupla confirmação para deletar)
    if (!confirm(`ATENÇÃO: Tem certeza que deseja DELETAR PERMANENTEMENTE a instância "${instanceName}"?`)) {
        return;
    }
    
    if (!confirm(`Esta ação é IRREVERSÍVEL! Confirma a exclusão da instância "${instanceName}"?`)) {
        return;
    }
    
    // Fazer requisição AJAX para deletar
    fetch('@Url.Action("Delete", "Instances")', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
        },
        body: 'instanceName=' + encodeURIComponent(instanceName)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Mostrar mensagem de sucesso
            alert('Instância deletada com sucesso: ' + data.data.message);
            
            // Recarregar a página para atualizar a lista de instâncias
            window.location.reload();
        } else {
            // Mostrar mensagem de erro
            alert('Erro ao deletar instância: ' + data.message);
        }
    })
    .catch(error => {
        alert('Erro de comunicação: ' + error.message);
    });
}

// Verificar estados automaticamente quando a página carrega
document.addEventListener('DOMContentLoaded', function() {
    // Verificar estados iniciais
    setTimeout(checkAllConnectionStates, 1000);
    
    // Verificar estados a cada 30 segundos
    setInterval(checkAllConnectionStates, 30000);
});
</script>
